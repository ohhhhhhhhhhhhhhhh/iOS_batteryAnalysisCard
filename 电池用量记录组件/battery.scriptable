{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "green",
    "glyph" : "battery-half"
  },
  "name" : "battery",
  "script" : "function nowTime() { \/\/获取当前时间\n    let now= new Date();\n    let _month = ( 10 > (now.getMonth()+1) ) ? '0' + (now.getMonth()+1) : now.getMonth()+1;\n    let _day = ( 10 > now.getDate() ) ? '0' + now.getDate() : now.getDate();\n    let _hour = ( 10 > now.getHours() ) ? '0' + now.getHours() : now.getHours();\n    let _minute = ( 10 > now.getMinutes() ) ? '0' + now.getMinutes() : now.getMinutes();\n    let _second = ( 10 > now.getSeconds() ) ? '0' + now.getSeconds() : now.getSeconds();\n    return now.getFullYear() + '-' + _month + '-' + _day + ' ' + _hour + ':' + _minute + ':' + _second;\n}\n\nfunction GetDateDiff(startTime, endTime, diffType) { \/\/计算时间差\n    \/\/将xxxx-xx-xx的时间格式，转换为 xxxx\/xx\/xx的格式 \n    startTime = startTime.replace(\/-\/g, \"\/\");\n    endTime = endTime.replace(\/-\/g, \"\/\");\n\n    \/\/将计算间隔类性字符转换为小写\n    diffType = diffType.toLowerCase();\n    var sTime = new Date(startTime);      \/\/开始时间\n    var eTime = new Date(endTime);  \/\/结束时间\n    \/\/作为除数的数字\n    var divNum = 1;\n    switch (diffType) {\n        case \"second\":\n            divNum = 1000;\n            break;\n        case \"minute\":\n            divNum = 1000 * 60;\n            break;\n        case \"hour\":\n            divNum = 1000 * 3600;\n            break;\n        case \"day\":\n            divNum = 1000 * 3600 * 24;\n            break;\n        default:\n            break;\n    }\n    return parseInt((eTime.getTime() - sTime.getTime()) \/ parseInt(divNum));\n}\n\n\/\/获取电量\nlet BatteryLevel = (Device.batteryLevel() * 100).toFixed(0)\n\nlet root = FileManager.local().documentsDirectory()\n\nlet leaf = \"batteryCache\"\n\nlet rootCache = FileManager.local().joinPath(root, leaf)\n\nif(!FileManager.local().fileExists(rootCache)){\n\ttry{\n\tFileManager.local().createDirectory(rootCache, false)\n\t}catch(err){\n\t\tconsole.log(err)\n\t}\n}\n\n\/\/缓存目录，缓存文件以当前电量命名\nlet currentCache = FileManager.local().joinPath(rootCache, \"_\"+BatteryLevel)\nlet cacheFile = \"\"\n\n\/\/判断是否存在\nlet exists = 0\n\nlet startTime = \"\"\nlet lastBattery = \"\"\nlet flag = true\n\/\/ console.log(\"断点\"+(Number(BatteryLevel)+2))\n\nlet i = 1\nfor(; Number(BatteryLevel)+i <= 100 && flag; i ++){\n\t\/\/console.log(Number(BatteryLevel)+i)\n\tcacheFile = FileManager.local().joinPath(rootCache, \"_\"+(Number(BatteryLevel)+i))\n    exists = FileManager.local().fileExists(cacheFile)\n\/\/console.log(exists)\n    if(exists){ \/\/上一格电量缓存文件存在\n    console.log(\"找到上一格电量缓存 \"+ (Number(BatteryLevel)+i))\n\tstartTime = FileManager.local().readString(cacheFile)\n  console.log(startTime)\n  \/\/console.log(\"上次电量为\")\n  lastBattery = cacheFile.split(\"_\")[1]\n  console.log(lastBattery)\n  flag = false \/\/ 不执行了\n  }\n}\n\nif(FileManager.local().fileExists(currentCache)){\n  if(flag){\/\/ 没有上一格电的记录，就使用当前一格电量的信息\n  startTime = FileManager.local().readString(currentCache)\n  console.log(startTime)\n  \/\/console.log(\"上次电量为\")\n  lastBattery = currentCache.split(\"_\")[1]\n  console.log(lastBattery)\n}\n}\nelse{ \/\/记录当前电量信息\n\tif(!Device.isCharging() || !Device.isFullyCharged()){ \/\/没有接入充电器\n\ttry{\n    let time=nowTime();\n  FileManager.local().writeString(currentCache, time) \/\/将当前电量信息记录\n  }catch(err){console.log(\"捕获\"+err)}\nif(flag){\/\/没有上一格电量记录\n  lastBattery = 0\n  startTime = nowTime()\n}\n}}\n\nconst currentTime = nowTime()\nlet result = GetDateDiff(startTime, currentTime, \"minute\")\nconsole.log(\"两者时间差为：\" + result + \"分钟\");\n\nasync function loadAppIcon() {\n  let url = \"https:\/\/is5-ssl.mzstatic.com\/image\/thumb\/Purple124\/v4\/21\/1e\/13\/211e13de-2e74-4221-f7db-d6d2c53b4323\/AppIcon-1x_U007emarketing-0-7-0-85-220.png\/540x540sr.jpg\"\n  let req = new Request(url)\n  return req.loadImage()\n}\n\n\/\/统计平均耗电量\nlet countFlag = true\nlet countBattery = (100*Device.batteryLevel()).toFixed(0)\nconsole.log(\"countBattery\"+countBattery)\nlet topTime = FileManager.local().readString(FileManager.local().joinPath(rootCache, \"_\"+countBattery))\nlet topBattery = countBattery\nlet AvgTime = (GetDateDiff(topTime, nowTime(), \"minute\") \/ 1).toFixed(2)\n\/\/if(FileManager.local().fileExists(FileManager.local().joinPath(rootCache, \"_\"+91))){\n\/\/console.log(\"找到91电量信息\")\n\/\/}\ntry{\n\tconsole.log(\"断点try\"+countBattery)\n\tif(FileManager.local().fileExists(rootCache)){\n\tfor(let i = 0; (100-i > Number(countBattery)) && countFlag; i++){\n\/\/console.log((100-i).toString()+FileManager.local().fileExists(FileManager.local().joinPath(rootCache, \"_\"+Number(100-i))))\n\tif(FileManager.local().fileExists(FileManager.local().joinPath(rootCache, \"_\"+Number(100-i)))){\nconsole.log(\"电量统计找到顶层电量\"+\"_\"+Number(100-i))\ncountFlag = false \/\/不执行了\ntopTime = FileManager.local().readString(FileManager.local().joinPath(rootCache, \"_\"+Number(100-i)))\nconsole.log(topTime)\ntopBattery = 100-i\nconsole.log(\"顶层电量为\"+topBattery+\"%\")\nAvgTime = (GetDateDiff(topTime, nowTime(), \"minute\") \/ (Number(topBattery)-Number(countBattery))).toFixed(2)\nconsole.log(\"平均时间为\"+AvgTime+\"分钟\")\n}\n        }\n    }\nif(countFlag==true){console.log(\"没有找到顶层电量\")}\n}\ncatch(err){console.log(err)}\n\n\/\/未充电\nasync function createWidgetNotCharged() {\n  let appIcon = await loadAppIcon()\n  let title = \"电量统计\"\n  let widget = new ListWidget()\n  \/\/ Add background gradient\n  let gradient = new LinearGradient()\n  gradient.locations = [0, 1]\n  gradient.colors = [\n    new Color(\"141414\"),\n    new Color(\"13233F\")\n  ]\n  widget.backgroundGradient = gradient\n  \/\/ Show app icon and title\n  let titleStack = widget.addStack()\n  let appIconElement = titleStack.addImage(appIcon)\n  appIconElement.imageSize = new Size(15, 15)\n  appIconElement.cornerRadius = 4\n  titleStack.addSpacer(4)\n  let titleElement = titleStack.addText(title)\n  titleElement.textColor = Color.white()\n  titleElement.textOpacity = 0.7\n  titleElement.font = Font.mediumSystemFont(13)\n  widget.addSpacer(10)\n  \/\/ Show API\n  console.log(\"widget \" + result)\n  let nameElement = \"\"\n  nameElement = widget.addText(\"已过去\"+result+\"分钟\")\n  nameElement.textColor = Color.white()\n  nameElement.font = Font.boldSystemFont(16)\n  widget.addSpacer(2)\n  let descriptionElement = \"\"\n  console.log(\"测试\"+Device.batteryLevel())\n  if(lastBattery == 0 && Device.batteryLevel() < 1){\n\tlet tempBattery = (Device.batteryLevel()*100).toFixed(0)\n  descriptionElement = widget.addText(\"开始记录\"+tempBattery+\"%\")\n}\n  else if(Device.batteryLevel() >= 0.995){\/\/满电\n\tconsole.log(100*Device.batteryLevel().toFixed(0))\n  lastBattery = 100\n  descriptionElement = widget.addText(\"上次电量\"+lastBattery+\"%\")\n}\n  else{\n\tdescriptionElement = widget.addText(\"上次电量\"+lastBattery+\"%\")\n}\n  \/\/descriptionElement.minimumScaleFactor = 0.5\n  descriptionElement.textColor = Color.white()\n  descriptionElement.font = Font.systemFont(14)\n  widget.addSpacer(3)\n\ntry{\nbaseWord = topTime.split(\" \")\nconsole.log(\"baseword\"+baseWord)\nconsole.log(\"测试时长\" + baseWord[1].split(\":\"))}\ncatch(err){console.log(err)}\n\ntry{\nlet infoElement = \"\"\n  infoElement = widget.addText(\"最高记录电量\"+topBattery+\"%\")\n  infoElement.textColor = Color.white()\n  infoElement.font = Font.boldSystemFont(12)\n  \/\/infoElement.minimumScaleFactor = 0.5\n  widget.addSpacer(2)\n\nlet timeElement = \"\"\n  timeElement = widget.addText(baseWord[0].split(\"-\")[1]+\"-\"+baseWord[0].split(\"-\")[2]+\" \"+baseWord[1].split(\":\")[0]+\":\"+baseWord[1].split(\":\")[1])\n  timeElement.textColor = Color.white()\n  timeElement.font = Font.boldSystemFont(13)\n  widget.addSpacer(2)\n\n\nlet avgElement = \"\"\n  avgElement = widget.addText(\"平均\"+AvgTime+\"分钟\/格\")\n  avgElement.textColor = Color.white()\n  avgElement.font = Font.boldSystemFont(12)\n  widget.addSpacer(2)\n}\ncatch(err){console.log(err+\"芭比Q没有信息记录\")}\n\n\n  \/\/ UI presented in Siri ans Shortcuta is non-interactive, so we only show the footer when not running the script from Siri.\n  if (!config.runsWithSiri) {\n    widget.addSpacer(8)\n    \/\/ Add button to open documentation\n    let linkSymbol = SFSymbol.named(\"arrow.up.forward\")\n    let footerStack = widget.addStack()\n    \/\/let linkStack = footerStack.addStack()\n    \/\/linkStack.centerAlignContent()\n    \/\/linkStack.url = api.url\n    \/\/let linkElement = linkStack.addText(\"Read more\")\n    \/\/linkElement.font = Font.mediumSystemFont(13)\n    \/\/linkElement.textColor = Color.blue()\n    \/\/linkStack.addSpacer(3)\n    \/\/let linkSymbolElement = linkStack.addImage(linkSymbol.image)\n    \/\/linkSymbolElement.imageSize = new Size(11, 11)\n    \/\/linkSymbolElement.tintColor = Color.blue()\n\/\/     footerStack.addSpacer()\n    \/\/ Add link to documentation\n\/\/     let docsSymbol = SFSymbol.named(\"book\")\n\/\/     let docsElement = footerStack.addImage(docsSymbol.image)\n\/\/     docsElement.imageSize = new Size(20, 20)\n\/\/     docsElement.tintColor = Color.white()\n\/\/     docsElement.imageOpacity = 0.5\n\/\/     docsElement.url = \"https:\/\/docs.scriptable.app\"\n  }\n  return widget\n}\n\n\/\/充电中\nasync function createWidgetCharged() {\n  let appIcon = await loadAppIcon()\n  let title = \"电量统计\"\n  let widget = new ListWidget()\n  \/\/ Add background gradient\n  let gradient = new LinearGradient()\n  gradient.locations = [0, 1]\n  gradient.colors = [\n    new Color(\"141414\"),\n    new Color(\"13233F\")\n  ]\n  widget.backgroundGradient = gradient\n  \/\/ Show app icon and title\n  let titleStack = widget.addStack()\n  let appIconElement = titleStack.addImage(appIcon)\n  appIconElement.imageSize = new Size(15, 15)\n  appIconElement.cornerRadius = 4\n  titleStack.addSpacer(4)\n  let titleElement = titleStack.addText(title)\n  titleElement.textColor = Color.white()\n  titleElement.textOpacity = 0.7\n  titleElement.font = Font.mediumSystemFont(13)\n  widget.addSpacer(12)\n  \/\/ Show API\n  let nameElement = widget.addText(\"充电中…\")\n  nameElement.textColor = Color.white()\n  nameElement.font = Font.boldSystemFont(18)\n  widget.addSpacer(2)\n  let currentBattery = (Device.batteryLevel()*100).toFixed(2)\n  console.log(currentBattery)\n  let descriptionElement = widget.addText(\"当前电量\"+currentBattery+\"%\")\n  descriptionElement.minimumScaleFactor = 0.5\n  descriptionElement.textColor = Color.white()\n  descriptionElement.font = Font.systemFont(14)\n  \/\/ UI presented in Siri ans Shortcuta is non-interactive, so we only show the footer when not running the script from Siri.\n  if (!config.runsWithSiri) {\n    widget.addSpacer(8)\n    \/\/ Add button to open documentation\n    let linkSymbol = SFSymbol.named(\"arrow.up.forward\")\n    let footerStack = widget.addStack()\n    let linkStack = footerStack.addStack()\n    linkStack.centerAlignContent()\n    \/\/linkStack.url = api.url\n    let linkElement = linkStack.addText(\"Read more\")\n    linkElement.font = Font.mediumSystemFont(13)\n    linkElement.textColor = Color.blue()\n    linkStack.addSpacer(3)\n    let linkSymbolElement = linkStack.addImage(linkSymbol.image)\n    linkSymbolElement.imageSize = new Size(11, 11)\n    linkSymbolElement.tintColor = Color.blue()\n    footerStack.addSpacer()\n    \/\/ Add link to documentation\n    let docsSymbol = SFSymbol.named(\"book\")\n    let docsElement = footerStack.addImage(docsSymbol.image)\n    docsElement.imageSize = new Size(20, 20)\n    docsElement.tintColor = Color.white()\n    docsElement.imageOpacity = 0.5\n    docsElement.url = \"https:\/\/docs.scriptable.app\"\n  }\n  return widget\n}\n\nlet isCharged = Device.isCharging()\/\/接入充电器\nif(isCharged || Device.isFullyCharged()){\n  \/\/清除缓存\n  const cache = FileManager.local().joinPath(FileManager.local().documentsDirectory(), \"batteryCache\")\n  console.log(cache)\n  if(FileManager.local().fileExists(cache)){\n  try{\n  FileManager.local().remove(cache)\n  console.log(\"已清除cache缓存\")\n}catch(err){console.log(err)}}\n  let widget = await createWidgetCharged()\n  if (config.runsInWidget) {\n  \/\/ The script runs inside a widget, so we pass our instance of ListWidget to be shown inside the widget on the Home Screen.\n  Script.setWidget(widget)\n  } else {\n  \/\/ The script runs inside the app, so we preview the widget.\n  widget.presentSmall()\n}\n\/\/ Calling Script.complete() signals to Scriptable that the script have finished running.\n\/\/ This can speed up the execution, in particular when running the script from Shortcuts or using Siri.\n  Script.complete()\n}else{\n  let widget = await createWidgetNotCharged()\n  if (config.runsInWidget) {\n  \/\/ The script runs inside a widget, so we pass our instance of ListWidget to be shown inside the widget on the Home Screen.\n  Script.setWidget(widget)\n  } else {\n  console.log(100*Device.batteryLevel())\n  \/\/ The script runs inside the app, so we preview the widget.\n  widget.presentSmall()\n}\n\/\/ Calling Script.complete() signals to Scriptable that the script have finished running.\n\/\/ This can speed up the execution, in particular when running the script from Shortcuts or using Siri.\n  Script.complete()\n}",
  "share_sheet_inputs" : [

  ]
}
